/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IRelayRecipientInterface extends ethers.utils.Interface {
  functions: {
    "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)": FunctionFragment;
    "getHubAddr()": FunctionFragment;
    "postRelayedCall(bytes,bool,uint256,bytes32)": FunctionFragment;
    "preRelayedCall(bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptRelayedCall",
    values: [
      string,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getHubAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postRelayedCall",
    values: [BytesLike, boolean, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "preRelayedCall",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptRelayedCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHubAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postRelayedCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preRelayedCall",
    data: BytesLike
  ): Result;

  events: {};
}

export class IRelayRecipient extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRelayRecipientInterface;

  functions: {
    acceptRelayedCall(
      relay: string,
      from: string,
      encodedFunction: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      gasLimit: BigNumberish,
      nonce: BigNumberish,
      approvalData: BytesLike,
      maxPossibleCharge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;

    getHubAddr(overrides?: CallOverrides): Promise<[string]>;

    postRelayedCall(
      context: BytesLike,
      success: boolean,
      actualCharge: BigNumberish,
      preRetVal: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    preRelayedCall(
      context: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptRelayedCall(
    relay: string,
    from: string,
    encodedFunction: BytesLike,
    transactionFee: BigNumberish,
    gasPrice: BigNumberish,
    gasLimit: BigNumberish,
    nonce: BigNumberish,
    approvalData: BytesLike,
    maxPossibleCharge: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string]>;

  getHubAddr(overrides?: CallOverrides): Promise<string>;

  postRelayedCall(
    context: BytesLike,
    success: boolean,
    actualCharge: BigNumberish,
    preRetVal: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  preRelayedCall(
    context: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptRelayedCall(
      relay: string,
      from: string,
      encodedFunction: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      gasLimit: BigNumberish,
      nonce: BigNumberish,
      approvalData: BytesLike,
      maxPossibleCharge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;

    getHubAddr(overrides?: CallOverrides): Promise<string>;

    postRelayedCall(
      context: BytesLike,
      success: boolean,
      actualCharge: BigNumberish,
      preRetVal: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    preRelayedCall(
      context: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    acceptRelayedCall(
      relay: string,
      from: string,
      encodedFunction: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      gasLimit: BigNumberish,
      nonce: BigNumberish,
      approvalData: BytesLike,
      maxPossibleCharge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHubAddr(overrides?: CallOverrides): Promise<BigNumber>;

    postRelayedCall(
      context: BytesLike,
      success: boolean,
      actualCharge: BigNumberish,
      preRetVal: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    preRelayedCall(
      context: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptRelayedCall(
      relay: string,
      from: string,
      encodedFunction: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      gasLimit: BigNumberish,
      nonce: BigNumberish,
      approvalData: BytesLike,
      maxPossibleCharge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHubAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    postRelayedCall(
      context: BytesLike,
      success: boolean,
      actualCharge: BigNumberish,
      preRetVal: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    preRelayedCall(
      context: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
