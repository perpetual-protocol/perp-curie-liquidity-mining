/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestPerpLiquidityMining,
  TestPerpLiquidityMiningInterface,
} from "../TestPerpLiquidityMining";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_claimant",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_balance",
        type: "uint256",
      },
    ],
    name: "Claimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "candidate",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_liquidityProvider",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_begin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_end",
        type: "uint256",
      },
    ],
    name: "claimStatus",
    outputs: [
      {
        internalType: "bool[]",
        name: "",
        type: "bool[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_week",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_claimedBalance",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "_merkleProof",
        type: "bytes32[]",
      },
    ],
    name: "claimWeek",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "week",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "bytes32[]",
            name: "merkleProof",
            type: "bytes32[]",
          },
        ],
        internalType: "struct MerkleRedeemUpgradeSafe.Claim[]",
        name: "_claims",
        type: "tuple[]",
      },
    ],
    name: "claimWeeks",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "claimed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLengthOfMerkleRoots",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "merkleRootIndexes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_begin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_end",
        type: "uint256",
      },
    ],
    name: "merkleRoots",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_week",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "_merkleRoot",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_totalAllocation",
        type: "uint256",
      },
    ],
    name: "seedAllocations",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "updateOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_liquidityProvider",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_week",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_claimedBalance",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "_merkleProof",
        type: "bytes32[]",
      },
    ],
    name: "verifyClaim",
    outputs: [
      {
        internalType: "bool",
        name: "valid",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "weekMerkleRoots",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506115d3806100206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063715018a6116100a2578063c804c39a11610071578063c804c39a14610209578063dd8c9c9d1461021c578063eb0d07f51461022f578063f373579f14610242578063fc0c546a146102555761010b565b8063715018a6146101de5780638da5cb5b146101e6578063bc5920ba146101ee578063c4d66de8146101f65761010b565b806347fb23c1116100de57806347fb23c1146101835780634cd488ab146101a357806358b4e4b4146101b65780636c8381f8146101c95761010b565b8063120aa8771461011057806313af40351461013957806339144f501461014e57806339436b0014610163575b600080fd5b61012361011e3660046111d6565b61025d565b604051610130919061131c565b60405180910390f35b61014c610147366004610ff8565b61027d565b005b6101566103d2565b6040516101309190611327565b61017661017136600461122c565b6103d8565b60405161013091906112e4565b61019661019136600461110d565b61046d565b604051610130919061129e565b61014c6101b1366004611201565b610522565b61014c6101c436600461113f565b6105b8565b6101d16105fe565b604051610130919061124d565b61014c61060d565b6101d16106b7565b61014c6106c6565b61014c610204366004610ff8565b6107c7565b61014c610217366004611019565b610899565b61015661022a3660046111be565b610903565b61012361023d36600461113f565b610915565b6101566102503660046111be565b61091f565b6101d1610940565b606860209081526000928352604080842090915290825290205460ff1681565b61028561094f565b6033546001600160a01b039081169116146102d15760405162461bcd60e51b815260040180806020018281038252602d81526020018061154b602d913960400191505060405180910390fd5b6001600160a01b0381166103165760405162461bcd60e51b81526004018080602001828103825260228152602001806114fa6022913960400191505060405180910390fd5b6033546001600160a01b03828116911614156103635760405162461bcd60e51b81526004018080602001828103825260268152602001806115786026913960400191505060405180910390fd5b6034546001600160a01b03828116911614156103b05760405162461bcd60e51b815260040180806020018281038252602781526020018061147e6027913960400191505060405180910390fd5b603480546001600160a01b0319166001600160a01b0392909216919091179055565b609c5490565b606082820360010160008167ffffffffffffffff811180156103f957600080fd5b50604051908082528060200260200182016040528015610423578160200160208202803683370190505b50905060005b8281101561046457858101600090815260676020526040902054825183908390811061045157fe5b6020908102919091010152600101610429565b50949350505050565b606082820360010160008167ffffffffffffffff8111801561048e57600080fd5b506040519080825280602002602001820160405280156104b8578160200160208202803683370190505b50905060005b828110156105185785810160009081526068602090815260408083206001600160a01b038b168452909152902054825160ff9091169083908390811061050057fe5b911515602092830291909101909101526001016104be565b5095945050505050565b61052a61094f565b6033546001600160a01b039081169116146105765760405162461bcd60e51b815260040180806020018281038252602d81526020018061154b602d913960400191505060405180910390fd5b610581838383610953565b5050609c80546001810182556000919091527faf85b9071dfafeac1409d3f1d19bafc9bc7c37974cde8df0ee6168f0086e539c0155565b6000838152606760205260409020546105ec5760405162461bcd60e51b81526004016105e390611360565b60405180910390fd5b6105f884848484610a33565b50505050565b6034546001600160a01b031690565b61061561094f565b6033546001600160a01b039081169116146106615760405162461bcd60e51b815260040180806020018281038252602d81526020018061154b602d913960400191505060405180910390fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319908116909155603480549091169055565b6033546001600160a01b031690565b6034546001600160a01b031661070d5760405162461bcd60e51b815260040180806020018281038252602f81526020018061151c602f913960400191505060405180910390fd5b61071561094f565b6034546001600160a01b039081169116146107615760405162461bcd60e51b81526004018080602001828103825260278152602001806114a56027913960400191505060405180910390fd5b6034546033546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360348054603380546001600160a01b03199081166001600160a01b03841617909155169055565b600054610100900460ff16806107e057506107e0610ad5565b806107ee575060005460ff16155b6108295760405162461bcd60e51b815260040180806020018281038252602e8152602001806114cc602e913960400191505060405180910390fd5b600054610100900460ff16158015610854576000805460ff1961ff0019909116610100171660011790555b6001600160a01b03821661087a5760405162461bcd60e51b81526004016105e3906113b0565b61088382610ae6565b8015610895576000805461ff00191690555b5050565b60005b81518110156108fe576108f6838383815181106108b557fe5b6020026020010151600001518484815181106108cd57fe5b6020026020010151602001518585815181106108e557fe5b6020026020010151604001516105b8565b60010161089c565b505050565b60676020526000908152604090205481565b6001949350505050565b609c818154811061092f57600080fd5b600091825260209091200154905081565b6069546001600160a01b031681565b3390565b6000838152606760205260409020541561097f5760405162461bcd60e51b81526004016105e390611404565b6000838152606760205260409081902083905560695490516323b872dd60e01b81526001600160a01b03909116906323b872dd906109c590339030908690600401611261565b602060405180830381600087803b1580156109df57600080fd5b505af11580156109f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a17919061119e565b6108fe5760405162461bcd60e51b81526004016105e3906113d7565b60008381526068602090815260408083206001600160a01b038816845290915290205460ff1615610a765760405162461bcd60e51b81526004016105e390611387565b610a8284848484610915565b610a9e5760405162461bcd60e51b81526004016105e390611330565b60008381526068602090815260408083206001600160a01b03881684529091529020805460ff191660011790556105f88483610b84565b6000610ae030610c63565b15905090565b600054610100900460ff1680610aff5750610aff610ad5565b80610b0d575060005460ff16155b610b485760405162461bcd60e51b815260040180806020018281038252602e8152602001806114cc602e913960400191505060405180910390fd5b600054610100900460ff16158015610b73576000805460ff1961ff0019909116610100171660011790555b610b7b610c6d565b61088382610d1f565b8015610895577fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a8282604051610bbb929190611285565b60405180910390a160695460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90610bf59085908590600401611285565b602060405180830381600087803b158015610c0f57600080fd5b505af1158015610c23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c47919061119e565b6108955760405162461bcd60e51b81526004016105e3906113d7565b803b15155b919050565b600054610100900460ff1680610c865750610c86610ad5565b80610c94575060005460ff16155b610ccf5760405162461bcd60e51b815260040180806020018281038252602e8152602001806114cc602e913960400191505060405180910390fd5b600054610100900460ff16158015610cfa576000805460ff1961ff0019909116610100171660011790555b610d02610ddc565b610d0a610e7c565b8015610d1c576000805461ff00191690555b50565b600054610100900460ff1680610d385750610d38610ad5565b80610d46575060005460ff16155b610d815760405162461bcd60e51b815260040180806020018281038252602e8152602001806114cc602e913960400191505060405180910390fd5b600054610100900460ff16158015610dac576000805460ff1961ff0019909116610100171660011790555b606980546001600160a01b0319166001600160a01b0384161790558015610895576000805461ff00191690555050565b600054610100900460ff1680610df55750610df5610ad5565b80610e03575060005460ff16155b610e3e5760405162461bcd60e51b815260040180806020018281038252602e8152602001806114cc602e913960400191505060405180910390fd5b600054610100900460ff16158015610d0a576000805460ff1961ff0019909116610100171660011790558015610d1c576000805461ff001916905550565b600054610100900460ff1680610e955750610e95610ad5565b80610ea3575060005460ff16155b610ede5760405162461bcd60e51b815260040180806020018281038252602e8152602001806114cc602e913960400191505060405180910390fd5b600054610100900460ff16158015610f09576000805460ff1961ff0019909116610100171660011790555b6000610f1361094f565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610d1c576000805461ff001916905550565b80356001600160a01b0381168114610c6857600080fd5b600082601f830112610f9c578081fd5b81356020610fb1610fac8361145f565b61143b565b8281528181019085830183850287018401881015610fcd578586fd5b855b85811015610feb57813584529284019290840190600101610fcf565b5090979650505050505050565b600060208284031215611009578081fd5b61101282610f75565b9392505050565b6000806040838503121561102b578081fd5b61103483610f75565b915060208084013567ffffffffffffffff80821115611051578384fd5b818601915086601f830112611064578384fd5b8135611072610fac8261145f565b81815284810190848601875b848110156110fc57813587016060818e03601f1901121561109d57898afd5b6040516060810181811089821117156110b257fe5b6040908152828b01358252820135818b01526060820135888111156110d5578b8cfd5b6110e38f8c83860101610f8c565b604083015250855250928701929087019060010161107e565b50979a909950975050505050505050565b600080600060608486031215611121578081fd5b61112a84610f75565b95602085013595506040909401359392505050565b60008060008060808587031215611154578081fd5b61115d85610f75565b93506020850135925060408501359150606085013567ffffffffffffffff811115611186578182fd5b61119287828801610f8c565b91505092959194509250565b6000602082840312156111af578081fd5b81518015158114611012578182fd5b6000602082840312156111cf578081fd5b5035919050565b600080604083850312156111e8578182fd5b823591506111f860208401610f75565b90509250929050565b600080600060608486031215611215578283fd5b505081359360208301359350604090920135919050565b6000806040838503121561123e578182fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156112d85783511515835292840192918401916001016112ba565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156112d857835183529284019291840191600101611300565b901515815260200190565b90815260200190565b60208082526016908201527524b731b7b93932b1ba1036b2b935b63290383937b7b360511b604082015260600190565b6020808252600d908201526c496e76616c696420636c61696d60981b604082015260600190565b6020808252600f908201526e436c61696d656420616c726561647960881b604082015260600190565b6020808252600d908201526c125b9d985b1a59081a5b9c1d5d609a1b604082015260600190565b60208082526013908201527211549497d514905394d1915497d19052531151606a1b604082015260600190565b6020808252601a908201527f63616e6e6f742072657772697465206d65726b6c6520726f6f74000000000000604082015260600190565b60405181810167ffffffffffffffff8111828210171561145757fe5b604052919050565b600067ffffffffffffffff82111561147357fe5b506020908102019056fe5065727046694f776e61626c65557067726164653a2073616d652061732063616e6469646174655065727046694f776e61626c65557067726164653a206e6f7420746865206e6577206f776e6572496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65645065727046694f776e61626c65557067726164653a207a65726f20616464726573735065727046694f776e61626c65557067726164653a2063616e646964617465206973207a65726f20616464726573735065727046694f776e61626c65557067726164653a2063616c6c6572206973206e6f7420746865206f776e65725065727046694f776e61626c65557067726164653a2073616d65206173206f726967696e616ca2646970667358221220d56416c79d29e714a3ffd7def9fdc9f65ccf46fa9271d62e704373b9039868a764736f6c63430007060033";

export class TestPerpLiquidityMining__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestPerpLiquidityMining> {
    return super.deploy(overrides || {}) as Promise<TestPerpLiquidityMining>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestPerpLiquidityMining {
    return super.attach(address) as TestPerpLiquidityMining;
  }
  connect(signer: Signer): TestPerpLiquidityMining__factory {
    return super.connect(signer) as TestPerpLiquidityMining__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestPerpLiquidityMiningInterface {
    return new utils.Interface(_abi) as TestPerpLiquidityMiningInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestPerpLiquidityMining {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestPerpLiquidityMining;
  }
}
