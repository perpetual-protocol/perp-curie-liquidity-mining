{
  "address": "0x816D6DC036A1AF7575A4f80E576AdB36EABECE46",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_claimant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "candidate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidityProvider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_begin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        }
      ],
      "name": "claimStatus",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidityProvider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_week",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_claimedBalance",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "claimWeek",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidityProvider",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "week",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "merkleProof",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct MerkleRedeemUpgradeSafe.Claim[]",
          "name": "claims",
          "type": "tuple[]"
        }
      ],
      "name": "claimWeeks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLengthOfMerkleRoots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "merkleRootIndexes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_begin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        }
      ],
      "name": "merkleRoots",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_week",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_totalAllocation",
          "type": "uint256"
        }
      ],
      "name": "seedAllocations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidityProvider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_week",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_claimedBalance",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "verifyClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "weekMerkleRoots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9dd95f8329944c526e7dc245d229232a23844bbf773d125b5210a9677a7b0346",
  "receipt": {
    "to": null,
    "from": "0x9E9DFaCCABeEcDA6dD913b3685c9fe908F28F58c",
    "contractAddress": "0x816D6DC036A1AF7575A4f80E576AdB36EABECE46",
    "transactionIndex": 0,
    "gasUsed": "1303012",
    "logsBloom": "0x
    "blockHash": "0x93d171472315ec3c245a610d4d61c2cfe2dad94e82d512ad6246da411a468a05",
    "transactionHash": "0x9dd95f8329944c526e7dc245d229232a23844bbf773d125b5210a9677a7b0346",
    "logs": [],
    "blockNumber": 423009,
    "cumulativeGasUsed": "1303012",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "2b9bb4de3e66f905af04ce31b2a1ebef",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"candidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_begin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"claimStatus\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_week\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimedBalance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claimWeek\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"week\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct MerkleRedeemUpgradeSafe.Claim[]\",\"name\":\"claims\",\"type\":\"tuple[]\"}],\"name\":\"claimWeeks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLengthOfMerkleRoots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"merkleRootIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_begin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"merkleRoots\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_week\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_totalAllocation\",\"type\":\"uint256\"}],\"name\":\"seedAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_week\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimedBalance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"verifyClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weekMerkleRoots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setOwner(address)\":{\"details\":\"Set ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateOwner()\":{\"details\":\"Transfers ownership of the contract to a new account (`_candidate`). Can only be called by the new owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PerpLiquidityMining.sol\":\"PerpLiquidityMining\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6287586f5e4a103c89d4dda41406136cdf283cc625bd1ebfdf1468aae5bfe449\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProofUpgradeable {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\",\"keccak256\":\"0xd0071da2b0b054a9b254845c2e71a9c3dbcf95451ce378f94fcb77ee67fbbede\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"contracts/Balancer/MerkleRedeemUpgradeSafe.sol\":{\"content\":\"// source: https://github.com/balancer-labs/erc20-redeemable/blob/master/merkle/contracts/MerkleRedeem.sol\\n// changes:\\n// 1. add license and update solidity version to 0.8.9\\n// 2. make it upgradeable\\n\\n// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.9;\\npragma abicoder v2;\\n\\nimport {\\n    MerkleProofUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { PerpOwnableUpgrade } from \\\"../utils/PerpOwnableUpgrade.sol\\\";\\n\\ncontract MerkleRedeemUpgradeSafe is PerpOwnableUpgrade {\\n    event Claimed(address _claimant, uint256 _balance);\\n\\n    //**********************************************************//\\n    //    The below state variables can not change the order    //\\n    //**********************************************************//\\n    // Recorded weeks\\n    mapping(uint256 => bytes32) public weekMerkleRoots;\\n    mapping(uint256 => mapping(address => bool)) public claimed;\\n\\n    IERC20 public token;\\n\\n    //**********************************************************//\\n    //    The above state variables can not change the order    //\\n    //**********************************************************//\\n\\n    //\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4 add state variables below \\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4//\\n\\n    //\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3 add state variables above \\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3//\\n    uint256[50] private __gap;\\n\\n    //\\n    // FUNCTIONS\\n    //\\n\\n    function __MerkleRedeem_init(address _token) internal initializer {\\n        __Ownable_init();\\n        __MerkleRedeem_init_unchained(_token);\\n    }\\n\\n    function __MerkleRedeem_init_unchained(address _token) internal initializer {\\n        token = IERC20(_token);\\n    }\\n\\n    function disburse(address _liquidityProvider, uint256 _balance) private {\\n        if (_balance > 0) {\\n            emit Claimed(_liquidityProvider, _balance);\\n            require(token.transfer(_liquidityProvider, _balance), \\\"ERR_TRANSFER_FAILED\\\");\\n        }\\n    }\\n\\n    function claimWeek(\\n        address _liquidityProvider,\\n        uint256 _week,\\n        uint256 _claimedBalance,\\n        bytes32[] memory _merkleProof\\n    ) public virtual {\\n        require(!claimed[_week][_liquidityProvider], \\\"Claimed already\\\");\\n        require(verifyClaim(_liquidityProvider, _week, _claimedBalance, _merkleProof), \\\"Incorrect merkle proof\\\");\\n\\n        claimed[_week][_liquidityProvider] = true;\\n        disburse(_liquidityProvider, _claimedBalance);\\n    }\\n\\n    struct Claim {\\n        uint256 week;\\n        uint256 balance;\\n        bytes32[] merkleProof;\\n    }\\n\\n    function claimWeeks(address _liquidityProvider, Claim[] memory claims) public virtual {\\n        uint256 totalBalance = 0;\\n        Claim memory claim;\\n        for (uint256 i = 0; i < claims.length; i++) {\\n            claim = claims[i];\\n\\n            require(!claimed[claim.week][_liquidityProvider], \\\"Claimed already\\\");\\n            require(\\n                verifyClaim(_liquidityProvider, claim.week, claim.balance, claim.merkleProof),\\n                \\\"Incorrect merkle proof\\\"\\n            );\\n\\n            totalBalance += claim.balance;\\n            claimed[claim.week][_liquidityProvider] = true;\\n        }\\n        disburse(_liquidityProvider, totalBalance);\\n    }\\n\\n    function claimStatus(\\n        address _liquidityProvider,\\n        uint256 _begin,\\n        uint256 _end\\n    ) external view returns (bool[] memory) {\\n        uint256 size = 1 + _end - _begin;\\n        bool[] memory arr = new bool[](size);\\n        for (uint256 i = 0; i < size; i++) {\\n            arr[i] = claimed[_begin + i][_liquidityProvider];\\n        }\\n        return arr;\\n    }\\n\\n    function merkleRoots(uint256 _begin, uint256 _end) external view returns (bytes32[] memory) {\\n        uint256 size = 1 + _end - _begin;\\n        bytes32[] memory arr = new bytes32[](size);\\n        for (uint256 i = 0; i < size; i++) {\\n            arr[i] = weekMerkleRoots[_begin + i];\\n        }\\n        return arr;\\n    }\\n\\n    function verifyClaim(\\n        address _liquidityProvider,\\n        uint256 _week,\\n        uint256 _claimedBalance,\\n        bytes32[] memory _merkleProof\\n    ) public view virtual returns (bool valid) {\\n        bytes32 leaf = keccak256(abi.encodePacked(_liquidityProvider, _claimedBalance));\\n        return MerkleProofUpgradeable.verify(_merkleProof, weekMerkleRoots[_week], leaf);\\n    }\\n\\n    function seedAllocations(\\n        uint256 _week,\\n        bytes32 _merkleRoot,\\n        uint256 _totalAllocation\\n    ) public virtual {\\n        require(weekMerkleRoots[_week] == bytes32(0), \\\"cannot rewrite merkle root\\\");\\n        weekMerkleRoots[_week] = _merkleRoot;\\n\\n        require(token.transferFrom(msg.sender, address(this), _totalAllocation), \\\"ERR_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1b6908b34d2b5d6156349c0e07ee0d0f0005d77a1d8619dd85676fecf85a2b4d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/PerpLiquidityMining.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.9;\\npragma abicoder v2;\\n\\nimport { MerkleRedeemUpgradeSafe } from \\\"./Balancer/MerkleRedeemUpgradeSafe.sol\\\";\\n\\ncontract PerpLiquidityMining is MerkleRedeemUpgradeSafe {\\n    //**********************************************************//\\n    //    The below state variables can not change the order    //\\n    //**********************************************************//\\n    // array of week\\n    uint256[] public merkleRootIndexes;\\n\\n    //**********************************************************//\\n    //    The above state variables can not change the order    //\\n    //**********************************************************//\\n\\n    function initialize(address _token) external initializer {\\n        require(_token != address(0), \\\"Invalid input\\\");\\n        __MerkleRedeem_init(_token);\\n    }\\n\\n    function seedAllocations(\\n        uint256 _week,\\n        bytes32 _merkleRoot,\\n        uint256 _totalAllocation\\n    ) public override onlyOwner {\\n        super.seedAllocations(_week, _merkleRoot, _totalAllocation);\\n        merkleRootIndexes.push(_week);\\n    }\\n\\n    //\\n    // VIEW\\n    //\\n\\n    function getLengthOfMerkleRoots() external view returns (uint256) {\\n        return merkleRootIndexes.length;\\n    }\\n}\\n\",\"keccak256\":\"0x8f28e2e6f02f14544a2b5986c7fb7b7412f5bcf9e778d966092831e01822d77a\",\"license\":\"GPL-2.0-or-later\"},\"contracts/utils/PerpOwnableUpgrade.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.9;\\n\\nimport { ContextUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\n// copy from openzeppelin Ownable, only modify how the owner transfer\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract PerpOwnableUpgrade is ContextUpgradeable {\\n    address private _owner;\\n    address private _candidate;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    function candidate() public view returns (address) {\\n        return _candidate;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"PerpFiOwnableUpgrade: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n        _candidate = address(0);\\n    }\\n\\n    /**\\n     * @dev Set ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function setOwner(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"PerpFiOwnableUpgrade: zero address\\\");\\n        require(newOwner != _owner, \\\"PerpFiOwnableUpgrade: same as original\\\");\\n        require(newOwner != _candidate, \\\"PerpFiOwnableUpgrade: same as candidate\\\");\\n        _candidate = newOwner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`_candidate`).\\n     * Can only be called by the new owner.\\n     */\\n    function updateOwner() public {\\n        require(_candidate != address(0), \\\"PerpFiOwnableUpgrade: candidate is zero address\\\");\\n        require(_candidate == _msgSender(), \\\"PerpFiOwnableUpgrade: not the new owner\\\");\\n\\n        emit OwnershipTransferred(_owner, _candidate);\\n        _owner = _candidate;\\n        _candidate = address(0);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x867bdd81f6edd2bddd8f904e05fd0b0959e2e8affd64a6185c9529546297c70f\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061169c806100206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063715018a6116100a2578063c804c39a11610071578063c804c39a14610239578063dd8c9c9d1461024c578063eb0d07f51461026c578063f373579f1461027f578063fc0c546a1461029257600080fd5b8063715018a6146102055780638da5cb5b1461020d578063bc5920ba1461021e578063c4d66de81461022657600080fd5b806347fb23c1116100de57806347fb23c11461019a5780634cd488ab146101ba57806358b4e4b4146101cd5780636c8381f8146101e057600080fd5b8063120aa8771461011057806313af40351461015357806339144f501461016857806339436b001461017a575b600080fd5b61013e61011e366004611161565b606860209081526000928352604080842090915290825290205460ff1681565b60405190151581526020015b60405180910390f35b61016661016136600461118d565b6102a5565b005b609c545b60405190815260200161014a565b61018d6101883660046111af565b610436565b60405161014a91906111d1565b6101ad6101a8366004611215565b6104f9565b60405161014a9190611248565b6101666101c8366004611282565b6105e2565b6101666101db3660046113ad565b61064e565b6034546001600160a01b03165b6040516001600160a01b03909116815260200161014a565b610166610741565b6033546001600160a01b03166101ed565b6101666107c1565b61016661023436600461118d565b610901565b61016661024736600461140e565b6109bd565b61016c61025a36600461151a565b60676020526000908152604090205481565b61013e61027a3660046113ad565b610b25565b61016c61028d36600461151a565b610b90565b6069546101ed906001600160a01b031681565b6033546001600160a01b031633146102d85760405162461bcd60e51b81526004016102cf90611533565b60405180910390fd5b6001600160a01b0381166103395760405162461bcd60e51b815260206004820152602260248201527f5065727046694f776e61626c65557067726164653a207a65726f206164647265604482015261737360f01b60648201526084016102cf565b6033546001600160a01b03828116911614156103a65760405162461bcd60e51b815260206004820152602660248201527f5065727046694f776e61626c65557067726164653a2073616d65206173206f726044820152651a59da5b985b60d21b60648201526084016102cf565b6034546001600160a01b03828116911614156104145760405162461bcd60e51b815260206004820152602760248201527f5065727046694f776e61626c65557067726164653a2073616d652061732063616044820152666e64696461746560c81b60648201526084016102cf565b603480546001600160a01b0319166001600160a01b0392909216919091179055565b6060600083610446846001611596565b61045091906115ae565b905060008167ffffffffffffffff81111561046d5761046d6112ae565b604051908082528060200260200182016040528015610496578160200160208202803683370190505b50905060005b828110156104f057606760006104b28389611596565b8152602001908152602001600020548282815181106104d3576104d36115c5565b6020908102919091010152806104e8816115db565b91505061049c565b50949350505050565b6060600083610509846001611596565b61051391906115ae565b905060008167ffffffffffffffff811115610530576105306112ae565b604051908082528060200260200182016040528015610559578160200160208202803683370190505b50905060005b828110156105d857606860006105758389611596565b8152602080820192909252604090810160009081206001600160a01b038b168252909252902054825160ff909116908390839081106105b6576105b66115c5565b91151560209283029190910190910152806105d0816115db565b91505061055f565b5095945050505050565b6033546001600160a01b0316331461060c5760405162461bcd60e51b81526004016102cf90611533565b610617838383610bb1565b5050609c80546001810182556000919091527faf85b9071dfafeac1409d3f1d19bafc9bc7c37974cde8df0ee6168f0086e539c0155565b60008381526068602090815260408083206001600160a01b038816845290915290205460ff16156106b35760405162461bcd60e51b815260206004820152600f60248201526e436c61696d656420616c726561647960881b60448201526064016102cf565b6106bf84848484610b25565b6107045760405162461bcd60e51b815260206004820152601660248201527524b731b7b93932b1ba1036b2b935b63290383937b7b360511b60448201526064016102cf565b60008381526068602090815260408083206001600160a01b03881684529091529020805460ff1916600117905561073b8483610cf0565b50505050565b6033546001600160a01b0316331461076b5760405162461bcd60e51b81526004016102cf90611533565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319908116909155603480549091169055565b6034546001600160a01b03166108315760405162461bcd60e51b815260206004820152602f60248201527f5065727046694f776e61626c65557067726164653a2063616e6469646174652060448201526e6973207a65726f206164647265737360881b60648201526084016102cf565b6034546001600160a01b0316331461089b5760405162461bcd60e51b815260206004820152602760248201527f5065727046694f776e61626c65557067726164653a206e6f7420746865206e656044820152663b9037bbb732b960c91b60648201526084016102cf565b6034546033546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360348054603380546001600160a01b03199081166001600160a01b03841617909155169055565b600054610100900460ff168061091a575060005460ff16155b6109365760405162461bcd60e51b81526004016102cf906115f6565b600054610100900460ff16158015610958576000805461ffff19166101011790555b6001600160a01b03821661099e5760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a59081a5b9c1d5d609a1b60448201526064016102cf565b6109a782610e00565b80156109b9576000805461ff00191690555b5050565b60408051606080820183526000808352602083018190529282015260005b8351811015610b1a578381815181106109f6576109f66115c5565b602090810291909101810151805160009081526068835260408082206001600160a01b038a168352909352919091205490925060ff1615610a6b5760405162461bcd60e51b815260206004820152600f60248201526e436c61696d656420616c726561647960881b60448201526064016102cf565b610a8385836000015184602001518560400151610b25565b610ac85760405162461bcd60e51b815260206004820152601660248201527524b731b7b93932b1ba1036b2b935b63290383937b7b360511b60448201526064016102cf565b6020820151610ad79084611596565b825160009081526068602090815260408083206001600160a01b038a1684529091529020805460ff19166001179055925080610b12816115db565b9150506109db565b5061073b8483610cf0565b6040516bffffffffffffffffffffffff19606086901b166020820152603481018390526000908190605401604051602081830303815290604052805190602001209050610b8683606760008881526020019081526020016000205483610e68565b9695505050505050565b609c8181548110610ba057600080fd5b600091825260209091200154905081565b60008381526067602052604090205415610c0d5760405162461bcd60e51b815260206004820152601a60248201527f63616e6e6f742072657772697465206d65726b6c6520726f6f7400000000000060448201526064016102cf565b6000838152606760205260409081902083905560695490516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b158015610c7157600080fd5b505af1158015610c85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca99190611644565b610ceb5760405162461bcd60e51b815260206004820152601360248201527211549497d514905394d1915497d19052531151606a1b60448201526064016102cf565b505050565b80156109b957604080516001600160a01b0384168152602081018390527fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a910160405180910390a160695460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b158015610d8657600080fd5b505af1158015610d9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbe9190611644565b6109b95760405162461bcd60e51b815260206004820152601360248201527211549497d514905394d1915497d19052531151606a1b60448201526064016102cf565b600054610100900460ff1680610e19575060005460ff16155b610e355760405162461bcd60e51b81526004016102cf906115f6565b600054610100900460ff16158015610e57576000805461ffff19166101011790555b610e5f610e7e565b6109a782610efa565b600082610e758584610f81565b14949350505050565b600054610100900460ff1680610e97575060005460ff16155b610eb35760405162461bcd60e51b81526004016102cf906115f6565b600054610100900460ff16158015610ed5576000805461ffff19166101011790555b610edd61102d565b610ee5611097565b8015610ef7576000805461ff00191690555b50565b600054610100900460ff1680610f13575060005460ff16155b610f2f5760405162461bcd60e51b81526004016102cf906115f6565b600054610100900460ff16158015610f51576000805461ffff19166101011790555b606980546001600160a01b0319166001600160a01b03841617905580156109b9576000805461ff00191690555050565b600081815b8451811015611025576000858281518110610fa357610fa36115c5565b60200260200101519050808311610fe5576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250611012565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061101d816115db565b915050610f86565b509392505050565b600054610100900460ff1680611046575060005460ff16155b6110625760405162461bcd60e51b81526004016102cf906115f6565b600054610100900460ff16158015610ee5576000805461ffff19166101011790558015610ef7576000805461ff001916905550565b600054610100900460ff16806110b0575060005460ff16155b6110cc5760405162461bcd60e51b81526004016102cf906115f6565b600054610100900460ff161580156110ee576000805461ffff19166101011790555b603380546001600160a01b0319163390811790915560405181906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610ef7576000805461ff001916905550565b80356001600160a01b038116811461115c57600080fd5b919050565b6000806040838503121561117457600080fd5b8235915061118460208401611145565b90509250929050565b60006020828403121561119f57600080fd5b6111a882611145565b9392505050565b600080604083850312156111c257600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015611209578351835292840192918401916001016111ed565b50909695505050505050565b60008060006060848603121561122a57600080fd5b61123384611145565b95602085013595506040909401359392505050565b6020808252825182820181905260009190848201906040850190845b81811015611209578351151583529284019291840191600101611264565b60008060006060848603121561129757600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156112e7576112e76112ae565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611316576113166112ae565b604052919050565b600067ffffffffffffffff821115611338576113386112ae565b5060051b60200190565b600082601f83011261135357600080fd5b813560206113686113638361131e565b6112ed565b82815260059290921b8401810191818101908684111561138757600080fd5b8286015b848110156113a2578035835291830191830161138b565b509695505050505050565b600080600080608085870312156113c357600080fd5b6113cc85611145565b93506020850135925060408501359150606085013567ffffffffffffffff8111156113f657600080fd5b61140287828801611342565b91505092959194509250565b6000806040838503121561142157600080fd5b61142a83611145565b915060208084013567ffffffffffffffff8082111561144857600080fd5b818601915086601f83011261145c57600080fd5b813561146a6113638261131e565b81815260059190911b8301840190848101908983111561148957600080fd5b8585015b83811015611509578035858111156114a55760008081fd5b86016060818d03601f19018113156114bd5760008081fd5b6114c56112c4565b828a013581526040830135818b01529082013590878211156114e75760008081fd5b6114f58e8b84860101611342565b60408201528552505091860191860161148d565b508096505050505050509250929050565b60006020828403121561152c57600080fd5b5035919050565b6020808252602d908201527f5065727046694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600082198211156115a9576115a9611580565b500190565b6000828210156115c0576115c0611580565b500390565b634e487b7160e01b600052603260045260246000fd5b60006000198214156115ef576115ef611580565b5060010190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60006020828403121561165657600080fd5b815180151581146111a857600080fdfea2646970667358221220b18e4e255402c5bb9589864a48b31c29c2f15ca12ee0d08e93884b9429796d5764736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c8063715018a6116100a2578063c804c39a11610071578063c804c39a14610239578063dd8c9c9d1461024c578063eb0d07f51461026c578063f373579f1461027f578063fc0c546a1461029257600080fd5b8063715018a6146102055780638da5cb5b1461020d578063bc5920ba1461021e578063c4d66de81461022657600080fd5b806347fb23c1116100de57806347fb23c11461019a5780634cd488ab146101ba57806358b4e4b4146101cd5780636c8381f8146101e057600080fd5b8063120aa8771461011057806313af40351461015357806339144f501461016857806339436b001461017a575b600080fd5b61013e61011e366004611161565b606860209081526000928352604080842090915290825290205460ff1681565b60405190151581526020015b60405180910390f35b61016661016136600461118d565b6102a5565b005b609c545b60405190815260200161014a565b61018d6101883660046111af565b610436565b60405161014a91906111d1565b6101ad6101a8366004611215565b6104f9565b60405161014a9190611248565b6101666101c8366004611282565b6105e2565b6101666101db3660046113ad565b61064e565b6034546001600160a01b03165b6040516001600160a01b03909116815260200161014a565b610166610741565b6033546001600160a01b03166101ed565b6101666107c1565b61016661023436600461118d565b610901565b61016661024736600461140e565b6109bd565b61016c61025a36600461151a565b60676020526000908152604090205481565b61013e61027a3660046113ad565b610b25565b61016c61028d36600461151a565b610b90565b6069546101ed906001600160a01b031681565b6033546001600160a01b031633146102d85760405162461bcd60e51b81526004016102cf90611533565b60405180910390fd5b6001600160a01b0381166103395760405162461bcd60e51b815260206004820152602260248201527f5065727046694f776e61626c65557067726164653a207a65726f206164647265604482015261737360f01b60648201526084016102cf565b6033546001600160a01b03828116911614156103a65760405162461bcd60e51b815260206004820152602660248201527f5065727046694f776e61626c65557067726164653a2073616d65206173206f726044820152651a59da5b985b60d21b60648201526084016102cf565b6034546001600160a01b03828116911614156104145760405162461bcd60e51b815260206004820152602760248201527f5065727046694f776e61626c65557067726164653a2073616d652061732063616044820152666e64696461746560c81b60648201526084016102cf565b603480546001600160a01b0319166001600160a01b0392909216919091179055565b6060600083610446846001611596565b61045091906115ae565b905060008167ffffffffffffffff81111561046d5761046d6112ae565b604051908082528060200260200182016040528015610496578160200160208202803683370190505b50905060005b828110156104f057606760006104b28389611596565b8152602001908152602001600020548282815181106104d3576104d36115c5565b6020908102919091010152806104e8816115db565b91505061049c565b50949350505050565b6060600083610509846001611596565b61051391906115ae565b905060008167ffffffffffffffff811115610530576105306112ae565b604051908082528060200260200182016040528015610559578160200160208202803683370190505b50905060005b828110156105d857606860006105758389611596565b8152602080820192909252604090810160009081206001600160a01b038b168252909252902054825160ff909116908390839081106105b6576105b66115c5565b91151560209283029190910190910152806105d0816115db565b91505061055f565b5095945050505050565b6033546001600160a01b0316331461060c5760405162461bcd60e51b81526004016102cf90611533565b610617838383610bb1565b5050609c80546001810182556000919091527faf85b9071dfafeac1409d3f1d19bafc9bc7c37974cde8df0ee6168f0086e539c0155565b60008381526068602090815260408083206001600160a01b038816845290915290205460ff16156106b35760405162461bcd60e51b815260206004820152600f60248201526e436c61696d656420616c726561647960881b60448201526064016102cf565b6106bf84848484610b25565b6107045760405162461bcd60e51b815260206004820152601660248201527524b731b7b93932b1ba1036b2b935b63290383937b7b360511b60448201526064016102cf565b60008381526068602090815260408083206001600160a01b03881684529091529020805460ff1916600117905561073b8483610cf0565b50505050565b6033546001600160a01b0316331461076b5760405162461bcd60e51b81526004016102cf90611533565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319908116909155603480549091169055565b6034546001600160a01b03166108315760405162461bcd60e51b815260206004820152602f60248201527f5065727046694f776e61626c65557067726164653a2063616e6469646174652060448201526e6973207a65726f206164647265737360881b60648201526084016102cf565b6034546001600160a01b0316331461089b5760405162461bcd60e51b815260206004820152602760248201527f5065727046694f776e61626c65557067726164653a206e6f7420746865206e656044820152663b9037bbb732b960c91b60648201526084016102cf565b6034546033546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360348054603380546001600160a01b03199081166001600160a01b03841617909155169055565b600054610100900460ff168061091a575060005460ff16155b6109365760405162461bcd60e51b81526004016102cf906115f6565b600054610100900460ff16158015610958576000805461ffff19166101011790555b6001600160a01b03821661099e5760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a59081a5b9c1d5d609a1b60448201526064016102cf565b6109a782610e00565b80156109b9576000805461ff00191690555b5050565b60408051606080820183526000808352602083018190529282015260005b8351811015610b1a578381815181106109f6576109f66115c5565b602090810291909101810151805160009081526068835260408082206001600160a01b038a168352909352919091205490925060ff1615610a6b5760405162461bcd60e51b815260206004820152600f60248201526e436c61696d656420616c726561647960881b60448201526064016102cf565b610a8385836000015184602001518560400151610b25565b610ac85760405162461bcd60e51b815260206004820152601660248201527524b731b7b93932b1ba1036b2b935b63290383937b7b360511b60448201526064016102cf565b6020820151610ad79084611596565b825160009081526068602090815260408083206001600160a01b038a1684529091529020805460ff19166001179055925080610b12816115db565b9150506109db565b5061073b8483610cf0565b6040516bffffffffffffffffffffffff19606086901b166020820152603481018390526000908190605401604051602081830303815290604052805190602001209050610b8683606760008881526020019081526020016000205483610e68565b9695505050505050565b609c8181548110610ba057600080fd5b600091825260209091200154905081565b60008381526067602052604090205415610c0d5760405162461bcd60e51b815260206004820152601a60248201527f63616e6e6f742072657772697465206d65726b6c6520726f6f7400000000000060448201526064016102cf565b6000838152606760205260409081902083905560695490516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b158015610c7157600080fd5b505af1158015610c85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca99190611644565b610ceb5760405162461bcd60e51b815260206004820152601360248201527211549497d514905394d1915497d19052531151606a1b60448201526064016102cf565b505050565b80156109b957604080516001600160a01b0384168152602081018390527fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a910160405180910390a160695460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b158015610d8657600080fd5b505af1158015610d9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbe9190611644565b6109b95760405162461bcd60e51b815260206004820152601360248201527211549497d514905394d1915497d19052531151606a1b60448201526064016102cf565b600054610100900460ff1680610e19575060005460ff16155b610e355760405162461bcd60e51b81526004016102cf906115f6565b600054610100900460ff16158015610e57576000805461ffff19166101011790555b610e5f610e7e565b6109a782610efa565b600082610e758584610f81565b14949350505050565b600054610100900460ff1680610e97575060005460ff16155b610eb35760405162461bcd60e51b81526004016102cf906115f6565b600054610100900460ff16158015610ed5576000805461ffff19166101011790555b610edd61102d565b610ee5611097565b8015610ef7576000805461ff00191690555b50565b600054610100900460ff1680610f13575060005460ff16155b610f2f5760405162461bcd60e51b81526004016102cf906115f6565b600054610100900460ff16158015610f51576000805461ffff19166101011790555b606980546001600160a01b0319166001600160a01b03841617905580156109b9576000805461ff00191690555050565b600081815b8451811015611025576000858281518110610fa357610fa36115c5565b60200260200101519050808311610fe5576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250611012565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061101d816115db565b915050610f86565b509392505050565b600054610100900460ff1680611046575060005460ff16155b6110625760405162461bcd60e51b81526004016102cf906115f6565b600054610100900460ff16158015610ee5576000805461ffff19166101011790558015610ef7576000805461ff001916905550565b600054610100900460ff16806110b0575060005460ff16155b6110cc5760405162461bcd60e51b81526004016102cf906115f6565b600054610100900460ff161580156110ee576000805461ffff19166101011790555b603380546001600160a01b0319163390811790915560405181906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610ef7576000805461ff001916905550565b80356001600160a01b038116811461115c57600080fd5b919050565b6000806040838503121561117457600080fd5b8235915061118460208401611145565b90509250929050565b60006020828403121561119f57600080fd5b6111a882611145565b9392505050565b600080604083850312156111c257600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015611209578351835292840192918401916001016111ed565b50909695505050505050565b60008060006060848603121561122a57600080fd5b61123384611145565b95602085013595506040909401359392505050565b6020808252825182820181905260009190848201906040850190845b81811015611209578351151583529284019291840191600101611264565b60008060006060848603121561129757600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156112e7576112e76112ae565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611316576113166112ae565b604052919050565b600067ffffffffffffffff821115611338576113386112ae565b5060051b60200190565b600082601f83011261135357600080fd5b813560206113686113638361131e565b6112ed565b82815260059290921b8401810191818101908684111561138757600080fd5b8286015b848110156113a2578035835291830191830161138b565b509695505050505050565b600080600080608085870312156113c357600080fd5b6113cc85611145565b93506020850135925060408501359150606085013567ffffffffffffffff8111156113f657600080fd5b61140287828801611342565b91505092959194509250565b6000806040838503121561142157600080fd5b61142a83611145565b915060208084013567ffffffffffffffff8082111561144857600080fd5b818601915086601f83011261145c57600080fd5b813561146a6113638261131e565b81815260059190911b8301840190848101908983111561148957600080fd5b8585015b83811015611509578035858111156114a55760008081fd5b86016060818d03601f19018113156114bd5760008081fd5b6114c56112c4565b828a013581526040830135818b01529082013590878211156114e75760008081fd5b6114f58e8b84860101611342565b60408201528552505091860191860161148d565b508096505050505050509250929050565b60006020828403121561152c57600080fd5b5035919050565b6020808252602d908201527f5065727046694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600082198211156115a9576115a9611580565b500190565b6000828210156115c0576115c0611580565b500390565b634e487b7160e01b600052603260045260246000fd5b60006000198214156115ef576115ef611580565b5060010190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60006020828403121561165657600080fd5b815180151581146111a857600080fdfea2646970667358221220b18e4e255402c5bb9589864a48b31c29c2f15ca12ee0d08e93884b9429796d5764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setOwner(address)": {
        "details": "Set ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateOwner()": {
        "details": "Transfers ownership of the contract to a new account (`_candidate`). Can only be called by the new owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 768,
        "contract": "contracts/PerpLiquidityMining.sol:PerpLiquidityMining",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 771,
        "contract": "contracts/PerpLiquidityMining.sol:PerpLiquidityMining",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1989,
        "contract": "contracts/PerpLiquidityMining.sol:PerpLiquidityMining",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5892,
        "contract": "contracts/PerpLiquidityMining.sol:PerpLiquidityMining",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 5894,
        "contract": "contracts/PerpLiquidityMining.sol:PerpLiquidityMining",
        "label": "_candidate",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 6075,
        "contract": "contracts/PerpLiquidityMining.sol:PerpLiquidityMining",
        "label": "__gap",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5327,
        "contract": "contracts/PerpLiquidityMining.sol:PerpLiquidityMining",
        "label": "weekMerkleRoots",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 5333,
        "contract": "contracts/PerpLiquidityMining.sol:PerpLiquidityMining",
        "label": "claimed",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5336,
        "contract": "contracts/PerpLiquidityMining.sol:PerpLiquidityMining",
        "label": "token",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(IERC20)4186"
      },
      {
        "astId": 5340,
        "contract": "contracts/PerpLiquidityMining.sol:PerpLiquidityMining",
        "label": "__gap",
        "offset": 0,
        "slot": "106",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5750,
        "contract": "contracts/PerpLiquidityMining.sol:PerpLiquidityMining",
        "label": "merkleRootIndexes",
        "offset": 0,
        "slot": "156",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)4186": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}